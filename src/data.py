from telebot import TeleBot
from telegraph import Telegraph
import mongoengine as me
from datetime import datetime, timezone
import certifi

import string
import random


class Data:

    TEST_PHOTO = "https://i.ibb.co/0Gv4JyW/photo-2021-04-16-12-48-15.jpg"

    JOB_FAIR_END_TIME = datetime(2021, 5, 20, 20, 0, 0)

    def __init__(self, conn_string: str, bot: TeleBot):
        self.bot = bot

        me.connect(host=conn_string, tlsCAFile=certifi.where(), connect=False)
        print("connection success ")

        # if there is no ejf table in DB - then create it
        if len(JobFair.objects) == 0:
            self.reinit_ejf_table()
            print("ejf and content tables have been initialized")
        # if there was table already
        else:
            self.update_ejf_table()

        # create telegraph account
        self._create_telegraph_account()

        self.ADMIN_PASSWORD = self.get_ejf().admin_password

        # remove later
        # if there is no quiz table in DB - then create it
        self.add_quizes()

        # for user in User.objects:
        #    user.additional_info = None
        #    user.save()

    def add_test_company_with_vacancies(
        self, user, vacancies_number=2, photo=None, company_name=None
    ):

        # company
        name = self._generate_string() if company_name is None else company_name
        photo_id = self.TEST_PHOTO if photo is None else photo
        description = self._generate_string(long=True)
        vacancy_counter = 20  # ?
        HR = user
        token = self._generate_string()
        registration_date = datetime.now(tz=timezone.utc)

        test_company = Company(
            name=name,
            photo_id=photo_id,
            description=description,
            vacancy_counter=vacancy_counter,
            HR=HR,
            token=token,
            registration_date=registration_date,
        )
        test_company.save()

        # vacancies
        for i in range(vacancies_number):
            company = test_company
            name = self._generate_string()
            tag = self.get_ejf().filters_interest[
                random.randint(0, len(self.get_ejf().filters_interest) - 1)
            ]
            salary = f"{random.randint(1000, 5000)}$"
            experience = self.get_ejf().filters_experience[
                random.randint(0, len(self.get_ejf().filters_experience) - 1)
            ]
            employment_type = self.get_ejf().filters_employment[
                random.randint(0, len(self.get_ejf().filters_employment) - 1)
            ]
            description = self._generate_string(long=True)
            add_date = datetime.now(tz=timezone.utc)
            last_update_date = datetime.now(tz=timezone.utc)
            active_days_left = 14
            is_active = True

            vacancy = Vacancy(
                company=company,
                name=name,
                tag=tag,
                salary=salary,
                experience=experience,
                employment_type=employment_type,
                description=description,
                add_date=add_date,
                last_update_date=last_update_date,
                active_days_left=active_days_left,
                is_active=is_active,
            )

            from .objects import vacancy as vacancy_module

            vacancy_module.create_vacancy_telegraph_page(vacancy, self.telegraph)

            vacancy.save()

    def add_quizes(self):
        if len(Quiz.objects) == 0:
            self._add_start_quiz()
        # otherwise update it
        else:
            self.update_quiz_table()

        # add vacancy quiz
        if Quiz.objects.filter(name="VacancyQuiz").count() == 0:
            self._add_vacancy_quiz()
            print("Vacancy quiz has been added")

        # add vacancy quiz
        if Quiz.objects.filter(name="VacancyEditQuiz").count() == 0:
            self._add_vacancy_edit_quiz()
            print("Vacancy edit quiz has been added")

        # add company quiz
        if Quiz.objects.filter(name="CompanyQuiz").count() == 0:
            self._add_company_quiz()
            print("Company quiz has been added")

    def _add_start_quiz(self):

        quiz = Quiz(name="StartQuiz", is_required=True)

        q_name_surname = Question(
            name="name_surname",
            message="–Ø–∫ –º–µ–Ω—ñ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?",
            correct_answer_message="–ì–∞—Ä–Ω–æ –∑–≤—É—á–∏—Ç—å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )

        q_age = Question(
            name="age",
            message="–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
            regex="[1-9][0-9]",
            correct_answer_message="–û–≥–æ, –º–∏ –æ–¥–Ω–æ–ª—ñ—Ç–∫–∏ ü•∞",
            wrong_answer_message="–í–∫–∞–∂–∏ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≤—ñ–∫ ü§°",
        )

        q_school = Question(
            name="school",
            message="–î–µ –≤—á–∏—à—Å—è? –í–∏–±–µ—Ä–∏ –∞–±–æ –≤–≤–µ–¥–∏.",
            buttons=[
                "–ù–£–õ–ü",
                "–õ–ù–£",
                "–£–ö–£",
                "–ö–ü–Ü",
                "–ö–ù–£",
                "–©–µ –≤ —à–∫–æ–ª—ñ",
                "–í–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤(-–ª–∞)",
            ],
            correct_answer_message="–ö–ª–∞—Å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )

        q_study_term = Question(
            name="study_term",
            message="–Ø–∫–∏–π —Ç–∏ –∫—É—Ä—Å?",
            buttons=[
                "–ü–µ—Ä—à–∏–π",
                "–î—Ä—É–≥–∏–π",
                "–¢—Ä–µ—Ç—ñ–π",
                "–ß–µ—Ç–≤–µ—Ä—Ç–∏–π",
                "–ù–∞ –º–∞–≥—ñ—Å—Ç–∞—Ä—Ç—É—Ä—ñ",
                "–ù—ñ—á–æ–≥–æ –∑ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–æ–≥–æ",
            ],
            allow_user_input=False,
            correct_answer_message="–Ü–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å, —â–æ–± –±—É–¥—É–≤–∞—Ç–∏ –∫–∞—Ä'—î—Ä—É ü•∞",
            wrong_answer_message="–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ü§°",
        )

        ##############
        q_city = Question(
            name="city",
            message="–ó–≤—ñ–¥–∫–∏ —Ç–∏? –í–∏–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É.",
            buttons=["–õ—å–≤—ñ–≤", "–ö–∏—ó–≤", "–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫", "–î–æ–Ω–µ—Ü—å–∫", "–°—Ç–∞–º–±—É–ª"],
            correct_answer_message="–ë—É–≤-–±—É–≤ —Ç–∞–º!",
            wrong_answer_message="–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–µ–∫—Å—Ç–æ–º :)",
        )

        q_contact = Question(
            name="contact",
            message="–û–±–º—ñ–Ω—è—î–º–æ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏?",
            buttons=["–¢—Ä–∏–º–∞–π!"],
            input_type="contact",
            correct_answer_message="–î—è–∫—É—é. –ê —è –∑–∞–ª–∏—à–∞—é —Ç–æ–±—ñ –∫–æ–Ω—Ç–∞–∫—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞: @Slavkoooo ü•∞",
            wrong_answer_message="–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç ü§°",
        )

        q_email = Question(
            name="email",
            message="–ù–∞–æ—Å—Ç–∞–Ω–æ–∫, –≤–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É —Å–≤–æ—î—ó –ø–æ—à—Ç–æ–≤–æ—ó —Å–∫—Ä–∏–Ω—å–∫–∏.",
            regex="^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$",
            correct_answer_message="–î—è–∫—É—é ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É ü§°",
        )

        q_agree = Question(
            name="user_agreements",
            message="–ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö.",
            buttons=["–Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å."],
            allow_user_input=False,
        )

        q_register_end = Question(
            name="end_register",
            message="–•—É—Ö, —É—Å—ñ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ–∑–∞–¥—É!\n\n–Ø –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤ —Ç–µ–±–µ –Ω–∞ –Ü–Ø–ö. –î–∞–ª—ñ –Ω–∞—Å –æ—á—ñ–∫—É—é—Ç—å –¥–≤–∞ –¥–Ω—ñ –ø—Ä–∏–≥–æ–¥.\n\n<b>–ü–æ–æ–Ω–ª–∞–π–Ω–∏–º–æ?</b> ü§ì",
            buttons=[
                "–ü—Ä–∏–π–¥—É –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è üëÄ",
                "–ü—Ä–∏–π–¥—É —à—É–∫–∞—Ç–∏ —Ä–æ–±–æ—Ç—É ü§ë",
                "–ü—Ä–∏–π–¥—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —â–æ—Å—å –Ω–æ–≤–µ üßê",
                "–í—ñ–∑—å–º—É —É—á–∞—Å—Ç—å —É –≤–æ—Ä–∫—à–æ–ø–∞—Ö‚úçÔ∏è",
                "–í—Å–µ —Ä–∞–∑–æ–º ü§π",
            ],
            allow_user_input=False,
        )

        quiz.questions = [
            q_name_surname,
            q_age,
            q_school,
            q_study_term,
            # q_city,
            q_contact,
            q_email,
            q_agree,
            q_register_end,
        ]

        quiz.save()

    def _add_vacancy_quiz(self):
        quiz = Quiz(name="VacancyQuiz", is_required=False)

        ejf = self.get_ejf()

        q_name = Question(
            name="name",
            message="–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó",
            max_text_size=100,
            correct_answer_message="–ì–∞—Ä–Ω–æ –∑–≤—É—á–∏—Ç—å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )

        q_tag = Question(
            name="tag",
            message="–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ —è–∫–æ—ó –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å—ñ—è",
            buttons=list(ejf.filters_interest),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_experience = Question(
            name="experience",
            message="–í–∏–±–µ—Ä–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º –º–∞—î –±—É—Ç–∏ —Ç–≤—ñ–π –Ω–æ–≤–∏–π –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫!",
            buttons=list(ejf.filters_experience),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_employment = Question(
            name="employment_type",
            message="–í–∏–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–π–Ω—è—Ç–æ—Å—Ç—ñ",
            buttons=list(ejf.filters_employment),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_salary = Question(
            name="salary",
            message="–í–≤–µ–¥–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏–º–µ —Ç–≤—ñ–π –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫",
            max_text_size=30,
            buttons=["–î–æ–≥–æ–≤—ñ—Ä–Ω–æ"],
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
        )

        q_description = Question(
            name="description",
            message="–õ–∏—à–∏–≤—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–π —à—Ç—Ä–∏—Ö!\n–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å—Ç–∏—Å–ª–∏–π –æ–ø–∏—Å —Å–≤–æ—î—ó –≤–∞–∫–∞–Ω—Å—ñ—ó, —â–æ–± –∫–∞–Ω–¥–∏–¥–∞—Ç –º—ñ–≥ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏–º –≤—ñ–Ω –±—É–¥–µ –∑–∞–π–º–∞—Ç–∏—Å—å.\n\n<b>–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤</b>",
            max_text_size=2000,
            correct_answer_message="–ö–ª–∞—Å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–µ–∫—Å—Ç–æ–º —ñ –Ω–µ –±—ñ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª—ñ–≤ ü§°",
        )

        quiz.questions = [
            q_name,
            q_tag,
            q_experience,
            q_employment,
            q_salary,
            q_description,
        ]

        quiz.save()

    def _add_vacancy_edit_quiz(self):
        quiz = Quiz(name="VacancyEditQuiz", is_required=False)

        ejf = self.get_ejf()

        q_tag = Question(
            name="tag",
            message="–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ —è–∫–æ—ó –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å—ñ—è",
            buttons=list(ejf.filters_interest),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_experience = Question(
            name="experience",
            message="–í–∏–±–µ—Ä–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º –º–∞—î –±—É—Ç–∏ —Ç–≤—ñ–π –Ω–æ–≤–∏–π –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫!",
            buttons=list(ejf.filters_experience),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_employment = Question(
            name="employment_type",
            message="–í–∏–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–π–Ω—è—Ç–æ—Å—Ç—ñ",
            buttons=list(ejf.filters_employment),
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
            allow_user_input=False,
        )

        q_salary = Question(
            name="salary",
            message="–í–≤–µ–¥–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏–º–µ —Ç–≤—ñ–π –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫",
            max_text_size=30,
            buttons=["–î–æ–≥–æ–≤—ñ—Ä–Ω–æ"],
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
        )

        q_description = Question(
            name="description",
            message="–õ–∏—à–∏–≤—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–π —à—Ç—Ä–∏—Ö!\n–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å—Ç–∏—Å–ª–∏–π –æ–ø–∏—Å —Å–≤–æ—î—ó –≤–∞–∫–∞–Ω—Å—ñ—ó, —â–æ–± –∫–∞–Ω–¥–∏–¥–∞—Ç –º—ñ–≥ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏–º –≤—ñ–Ω –±—É–¥–µ –∑–∞–π–º–∞—Ç–∏—Å—å.\n\n<b>–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤</b>",
            max_text_size=2000,
            correct_answer_message="–ö–ª–∞—Å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–µ–∫—Å—Ç–æ–º —ñ –Ω–µ –±—ñ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª—ñ–≤ ü§°",
        )

        quiz.questions = [
            q_tag,
            q_experience,
            q_employment,
            q_salary,
            q_description,
        ]

        quiz.save()

    def _add_company_quiz(self):
        quiz = Quiz(name="CompanyQuiz", is_required=False)

        q_name = Question(
            name="name",
            message="–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó",
            max_text_size=30,
            correct_answer_message="–ì–∞—Ä–Ω–æ –∑–≤—É—á–∏—Ç—å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )

        q_photo_id = Question(
            name="photo_id",
            message="–°–∫–∏–Ω—å —Ñ–æ—Ç–∫—É –∫–æ–º–ø–∞–Ω—ñ—ó",
            input_type="photo",
            correct_answer_message="–û–≥–æ, –∫—Ä—É—Ç–æ ü•∞",
            wrong_answer_message="–ù–µ —Ç—Ä–µ–±–∞ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏",
        )

        q_description = Question(
            name="description",
            message="–ù–∞–¥—ñ—à–ª–∏ –æ–ø–∏—Å –∫–æ–º–ø–∞–Ω—ñ—ó",
            max_text_size=2000,
            correct_answer_message="–ö–ª–∞—Å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–µ–∫—Å—Ç–æ–º —ñ –Ω–µ –±—ñ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª—ñ–≤ ü§°",
        )

        q_company_url = Question(
            name="company_url",
            message="–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó",
            regex="^https:\/\/.*",
            correct_answer_message="–ö–ª–∞—Å ü•∞",
            wrong_answer_message="–í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–∞ <b>https://</b>",
        )

        quiz.questions = [q_name, q_photo_id, q_description, q_company_url]

        quiz.save()

    def reinit_ejf_table(self):
        # delete collections
        JobFair.objects.delete()
        Content.objects.delete()

        # create content table
        content = Content()
        content.start_text = (
            "–ô–æ—É, –¥—Ä—É–∑—ñ! –¢–µ–∂ –ø–æ–º—ñ—Ç–∏–ª–∏, —â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º –∑–Ω–∏–∫–ª–∏ –∑–∞–ø–∞—Ö–∏ —ñ —ó–∂–∞ —è–∫–æ—Å—å –Ω–µ —Ç–∞–∫ —Å–º–∞–∫—É—î? üòî –£—Å–µ —è—Å–Ω–æ: –∂–∏—Ç—Ç—è –±–µ–∑ –Ü–Ø–ö—É –≤—Ç—Ä–∞—Ç–∏–ª–æ —Å–º–∞–∫.\n\n"
            "üå§ –ù–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ, —â–æ –¥–æ 19 —Ç—Ä–∞–≤–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—è –∑–æ–≤—Å—ñ–º —Ç—Ä–æ—Ö–∏. –ê —â–æ —Ç–∞–º 19 —Ç—Ä–∞–≤–Ω—è? –ê —Ç–∞–º <b>–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ —è—Ä–º–∞—Ä–∫—É –∫–∞—Ä‚Äô—î—Ä–∏ ‚Äî –Ü–Ø–ö—É –≤—ñ–¥ BEST Lviv!</b>"
            "–ê–ª–µ –º—É—Å–∏–º–æ –∑—Ä–æ–±–∏—Ç–∏ –∫–∞–º—ñ–Ω–≥-–∞—É—Ç: —Ü—å–æ–≥–æ —Ä–æ–∫—É <b>–Ü–Ø–ö —Å—Ç–∞–≤ –≤—ñ—Ä—Ç—É–∞–ª–æ–º.</b> üò≥ –ù–µ–º–∞—î —á–∞—Å—É –ø–æ—è—Å–Ω—é–≤–∞—Ç–∏. –¢–∏, –≥–æ–ª–æ–≤–Ω–µ, —Ä–µ—î—Å—Ç—Ä—É–π—Å—è. –î–∞–ª—ñ ‚Äî –±—ñ–ª—å—à–µ"
        )

        content.user_start_text = "–ü—Ä–∏–≤"
        content.user_start_photo = self.TEST_PHOTO
        content.ejf_start_text = (
            "–Ø –∑–Ω–∞—é, –¥—Ä—É–∂–µ, —â–æ –¥–æ 19 —Ç—Ä–∞–≤–Ω—è —â–µ —î —Ç—Ä–æ—Ö–∏ —á–∞—Å—É, —Ç–æ–º—É –ø—Ä–∏–≥–æ—Ç—É–≤–∞–≤ –¥–ª—è —Ç–µ–±–µ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö —à—Ç—É–∫. –ó–∞—Ö–æ–¥—å —É <b>–º–µ–Ω—é</b>, —á–∏—Ç–∞–π, —Å–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ üßê\n\n"
            "–ü–æ—á—É–≤–∞–π —Å–µ–±–µ, —è–∫ –≤–¥–æ–º–∞ ‚ò∫Ô∏è"
        )
        content.ejf_start_photo = self.TEST_PHOTO
        content.save()

        # create ejf table
        ejf = JobFair()
        ejf.filters_interest = ["Full Stack", "Front End", "Data Science"]
        ejf.filters_experience = ["1 —Ä—ñ–∫", "3+ —Ä–æ–∫—ñ–≤"]
        ejf.filters_employment = ["Full time", "Part time"]
        ejf.admin_password = "admin"
        ejf.cv_archive_file_id_list = []
        ejf.cv_archive_last_update = None
        ejf.cv_archive_size = 0
        ejf.start_menu = [
            SimpleButton(
                name="–©–æ? ü§®",
                text=(
                    "<b>–Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π —è—Ä–º–∞—Ä–æ–∫ –∫–∞—Ä‚Äô—î—Ä–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –Ü–Ø–ö ‚Äî —Ü–µ must-visit –ø–æ–¥—ñ—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.</b> –ù–µ –ª—è–∫–∞–π—Å—è —Å–ª–æ–≤–∞ ‚Äú—ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π‚Äù, –±–æ –Ω–∞—à –Ø—Ä–º–∞—Ä–æ–∫ —É–∂–µ –¥–∞–≤–Ω–æ –≤–∏–π—à–æ–≤ –∑–∞ –±—É–¥—å-—è–∫—ñ —Ä–∞–º–∫–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ø—Ä–µ—Ç–µ–Ω–¥—É—î –Ω–∞–∑–∏–≤–∞—Ç–∏—Å—è –Ω–∞–π–º–∞—Å—à—Ç–∞–±–Ω—ñ—à–∏–º —É –õ—å–≤–æ–≤—ñ.\n\n"
                    "–£ –Ω–∞—Å –¥–ª—è —Ü—å–æ–≥–æ —î –≤—Å–µ:\n\n"
                    "‚úÖ <b>–¢–æ–ø-–∫–æ–º–ø–∞–Ω—ñ—ó</b>, —è–∫—ñ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ –≤ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö. –ß–µ–∫–Ω–∏ —Ä–æ–∑–¥—ñ–ª '–ö–æ–º–ø–∞–Ω—ñ—ó'.\n\n"
                    "‚úÖ –ö–ª–∞—Å–Ω–∏–π <b>–∫–æ–Ω—Ç–µ–Ω—Ç</b>, —è–∫–∏–π –∑–∞ –¥–≤–∞ –¥–Ω—ñ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –Ω–∞—Ä–µ—à—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –∫–∏–º —Ç–∏ —Ö–æ—á–µ—à —Å—Ç–∞—Ç–∏. –û–∑–Ω–∞–π–æ–º—Å—è –∑ —Ä–æ–∑–¥—ñ–ª–æ–º '–†–æ–∑–∫–ª–∞–¥'.\n\n"
                    "‚úÖ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–Ω–∞–π—Ç–∏ <b>—Ä–æ–±–æ—Ç—É</b> –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–æ–±—Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω–µ! –ü—ñ—Å–ª—è 20 —Ç—Ä–∞–≤–Ω—è —è –æ–Ω–æ–≤–ª—é –º–µ–Ω—é —ñ —Ç–∏ –≤—Å–µ –∑—Ä–æ–∑—É–º—ñ—î—à.\n\n"
                    "‚úÖ –ù–∞–π–∫—Ä–∞—â—ñ <b>—É—á–∞—Å–Ω–∏–∫–∏</b>. –£–≥—É, —Ç–∞–∫—ñ —è–∫ —Ç–∏!üòå\n\n"
                    "–û—Å—Ç–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∏ –π –Ü–Ø–ö 2021 —Å—Ç–∞–Ω–µ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é. –©–µ –π –Ω–µ –ø—Ä–æ—Å—Ç–æ—é, –∞ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—é. <b>–ó—É—Å—Ç—Ä—ñ–Ω–µ–º–æ—Å—è –Ω–∞ Hopin!</b>\n\n"
                    "–ü–∞!"
                ),
                photo=self.TEST_PHOTO,
            ),
            SimpleButton(
                name="–î–µ —ñ —è–∫? ü¶¶",
                text=(
                    "–ü–∞–º‚Äô—è—Ç–∞—î—à, —â–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —è –∫–∞–∑–∞–≤, —â–æ –Ü–Ø–ö —Å—Ç–∞–≤ –≤—ñ—Ä—Ç—É–∞–ª–æ–º? –¢–∞–∫-–æ—Ç, —è –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ, —â–æ —Ü—å–æ–≥–æ —Ä–æ–∫—É —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –ø–æ–ª—ñ—Ç–µ—Ö–Ω—ñ—Ü—ñ –∑–≤–∏—á–Ω–æ–≥–æ –Ø—Ä–º–∞—Ä–∫—É –Ω–µ –±—É–¥–µ. –ù–µ –±—É–¥–µ –¥–æ–≤–≥–∏—Ö —á–µ—Ä–≥, –≤–µ–ª–∏–∫–∏—Ö —Å–∫—É–ø—á–µ–Ω—å —ñ —Ö–∞–æ—Å—É. <b>–ú–∏ –ø–µ—Ä–µ—ó–∂–¥–∂–∞—î–º–æ –≤ –∫—Ä–∞—â—ñ —Å–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ —É–º–æ–≤–∏... –í –æ–Ω–ª–∞–π–Ω –ø—Ä–æ—Å—Ç—ñ—Ä!</b>‚úåÔ∏èüë©‚Äçüíª\n\n"
                    "–Ü–Ø–ö –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ <b>Hopin</b>. –¢–∏ –º–∞–π–∂–µ –Ω–µ –≤—ñ–¥—á—É—î—à —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è–º –Ω–∞–∂–∏–≤–æ —ñ –æ–Ω–ª–∞–π–Ω. –ù–∞ Hopin —É—Å–µ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞–∫, —è–∫ –º–∏ –∑–≤–∏–∫–ª–∏: –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ —Å—Ç–µ–Ω–¥–∏ –∑ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏, –æ–∫—Ä–µ–º–∞ –∫—ñ–º–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π —Ç–∞ –≤–æ—Ä–∫—à–æ–ø—ñ–≤. –Ñ –Ω–∞–≤—ñ—Ç—å —Å—Ü–µ–Ω–∞!\n\n"
                    "<b>–ü–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ñ —ñ –ø–æ–±–∞—á —É—Å–µ –Ω–∞ –≤–ª–∞—Å–Ω—ñ –æ—á—ñ.</b>"
                ),
                photo=self.TEST_PHOTO,
            ),
            SimpleButton(
                name="–ö–æ–º–ø–∞–Ω—ñ—ó üìà",
                text="–ö–æ–º–ø–∞–Ω—ñ—ó–ö–æ–º–ø–∞–Ω—ñ—ó–ö–æ–º–ø–∞–Ω—ñ—ó",
                photo=self.TEST_PHOTO,
                url_link="https://ejf.best-lviv.org.ua/partners/ejfwp/",
                url_text="–î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—ó",
            ),
            SimpleButton(
                name="–†–æ–∑–∫–ª–∞–¥ üìå",
                text="–†–æ–∑–∫–ª–∞–¥–†–æ–∑–∫–ª–∞–¥–†–æ–∑–∫–ª–∞–¥",
                photo=self.TEST_PHOTO,
            ),
            SimpleButton(
                name="–ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏ ‚úçÔ∏è",
                text=(
                    "üôÇ–ó–∞–ª–∏—à–∏–ª–∏—Å—è –ø–∏—Ç–∞–Ω–Ω—è? –ú–æ–∂–µ, –º–∞—î—à –≤–∞–∂–ª–∏–≤–∏–π —Ñ—ñ–¥–±–µ–∫ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ? –£ —Ç–∞–∫–æ–º—É —Ä–∞–∑—ñ –Ω–∞–ø–∏—à–∏ –∫–æ–º—É—Å—å –∑ –Ω–∞—ÅüôÉ\n\n"
                    "<b>–í–∏–±–∏—Ä–∞–π:</b>\n\n"
                    "<a href='https://t.me/Slavkoooo'>–≥–æ–ª–æ–≤–Ω–∏–π –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –Ø—Ä—ñ–∫</a>\n\n"
                    "<a href='https://t.me/PogibaAnn'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –∑–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –ê–Ω—è</a>\n\n"
                    "<a href='https://t.me/OnAzart'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –∑–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –ù–∞–∑–∞—Ä</a>\n\n"
                    "<a href='https://t.me/Yaroslav_Horodyskyi'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –∑–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—É —á–∞—Å—Ç–∏–Ω—É –Ø—Ä—ñ–∫</a>\n\n"
                    "<a href='https://t.me/demberetska'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –°–æ–ª—è</a>\n\n"
                    "<a href='https://t.me/foxiero'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –∑–∞ –¥–∏–∑–∞–π–Ω –°–æ—Ñ–∞</a>\n\n"
                    "<a href='https://t.me/vikahbhk'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –∑–∞ –ø—ñ–∞—Ä –í—ñ–∫–∞</a>\n\n"
                    "<a href='https://t.me/yarchik_5'>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –∑–∞ –ª—é–¥—Å—å–∫—ñ —Ä–µ—Å—É—Ä—Å–∏ –Ø—Ä–∏–Ω–∞</a>\n\n"
                ),
                photo=self.TEST_PHOTO,
            ),
        ]
        ejf.content = content
        ejf.start_datetime = datetime(2021, 5, 19, 10, 0, 0)
        ejf.end_datetime = self.JOB_FAIR_END_TIME
        ejf.save()

    def update_ejf_table(self):
        ejf = self.get_ejf()

        # form paragraphs in ejf menu
        for btn in ejf.start_menu:
            btn.name = btn.name.replace("\\n", "\n")
            btn.text = btn.text.replace("\\n", "\n")

        # form paragraphs in content
        content = ejf.content
        ejf.content.start_text = content.start_text.replace("\\n", "\n")
        ejf.content.user_start_text = content.user_start_text.replace("\\n", "\n")
        ejf.content.ejf_start_text = content.ejf_start_text.replace("\\n", "\n")

        ejf.content.save()
        ejf.save()

    def update_quiz_table(self):
        quizes = Quiz.objects

        # form paragraphs in questions
        for quiz in quizes:
            for question in quiz.questions:
                question.message = question.message.replace("\\n", "\n")

            quiz.save()

    def get_ejf(self):
        return JobFair.objects.first()

    def get_cv_count(self) -> int:
        return User.objects.filter(cv_file_id__ne=None).count()

    def update_deleted_users(self):
        pass

    # HZ CHI TREBA
    def _add_test_user(
        self,
        chat_id,
        name,
        surname,
        username,
        interests=[],
        experience="",
        employment="",
        apply_counter=0,
        registration_date=None,
        last_update_date=None,
        last_interaction_date=None,
        hr_status=False,
    ):

        registration_date = datetime.now(tz=timezone.utc)
        last_interaction_date = registration_date
        last_update_date = registration_date

        User(
            chat_id=chat_id,
            name=name,
            surname=surname,
            username=username,
            interests=interests,
            experience=experience,
            employment=employment,
            apply_counter=apply_counter,
            registration_date=registration_date,
            last_update_date=last_update_date,
            last_interaction_date=last_interaction_date,
            hr_status=hr_status,
        ).save()

    def _generate_string(self, long=False):
        letters = string.ascii_letters
        if long is False:
            length = random.randint(10, 30)
        else:
            length = random.randint(300, 500)

        return "".join(random.choice(letters) for i in range(length))

    def _create_telegraph_account(self):
        SHORT_NAME = "BEST Job Fest"
        AUTHOR_NAME = "BEST Lviv"
        AUTHOR_URL = "https://t.me/bestlviv"

        ejf = self.get_ejf()

        if ejf.telegraph_token is None:
            self.telegraph = Telegraph()
            self.telegraph.create_account(SHORT_NAME, AUTHOR_NAME, AUTHOR_URL)

            # save new token
            ejf.update(set__telegraph_token=self.telegraph.get_access_token())
            ejf.save()

            print("New Telegraph account has been initialized")

        else:
            self.telegraph = Telegraph(ejf.telegraph_token)

            print("Telegraph account has been initialized")


class Content(me.Document):
    start_text = me.StringField()
    start_photo = me.StringField()
    user_start_text = me.StringField()
    user_start_photo = me.StringField()
    ejf_start_text = me.StringField()
    ejf_start_photo = me.StringField()


class SimpleButton(me.EmbeddedDocument):
    name = me.StringField()
    text = me.StringField()
    photo = me.StringField()
    url_link = me.StringField()
    url_text = me.StringField()


class JobFair(me.Document):
    filters_interest = me.ListField(default=list())
    filters_experience = me.ListField(default=list())
    filters_employment = me.ListField(default=list())
    admin_password = me.StringField()
    telegraph_token = me.StringField()
    cv_archive_file_id_list = me.ListField(default=None)
    cv_archive_last_update = me.DateTimeField(default=None)
    cv_archive_size = me.IntField(default=0)
    start_menu = me.ListField(me.EmbeddedDocumentField(SimpleButton), default=list())
    content = me.ReferenceField(Content)
    start_datetime = me.DateTimeField()
    end_datetime = me.DateTimeField()


class User(me.Document):
    chat_id = me.IntField(required=True, unique=True)
    name = me.StringField(required=True)
    surname = me.StringField(required=True)
    username = me.StringField(required=True)
    interests = me.ListField(default=list())
    experience = me.ListField(default=list())
    employment = me.ListField(default=list())
    cv_file_id = me.StringField(default=None)
    cv_file_name = me.StringField(default=None)
    apply_counter = me.IntField(default=20)
    additional_info = me.DictField(default=None)
    register_source = me.StringField(default="Unknown")
    registration_date = me.DateTimeField(required=True)
    last_update_date = me.DateTimeField(required=True)
    last_interaction_date = me.DateTimeField(required=True)
    hr_status = me.BooleanField(default=False)
    is_blocked = me.BooleanField(default=False)


class Company(me.Document):
    name = me.StringField(required=True, unique=True)
    photo_id = me.StringField(required=True)
    description = me.StringField(required=True)
    company_url = me.StringField()
    vacancy_counter = me.IntField(default=20)  # ?
    promote_counter = me.IntField(default=1)
    HR = me.ReferenceField(User, required=False)
    token = me.StringField(required=True)
    registration_date = me.DateTimeField(required=True)
    # vacancy_list = me.ListField(me.EmbeddedDocumentField, Vacancy, required=False)


class Vacancy(me.Document):
    company = me.ReferenceField(Company, required=True)
    name = me.StringField(required=True)
    tag = me.StringField(required=True)
    salary = me.StringField(required=True)
    experience = me.StringField(required=True)
    employment_type = me.StringField(required=True)
    description = me.StringField(required=True)
    telegraph_link_token = me.StringField()
    add_date = me.DateTimeField(required=True)
    last_update_date = me.DateTimeField(required=True)
    active_days_left = me.IntField(default=14)
    is_active = me.BooleanField(default=True)

    @staticmethod
    def get_editable_field_info() -> dict:
        return {
            "tag": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
            "salary": "–ó–∞—Ä–æ–±—ñ—Ç–Ω—è –ø–ª–∞—Ç–∞",
            "experience": "–î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏",
            "employment_type": "–¢–∏–ø –ø—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "description": "–û–ø–∏—Å",
        }


class Question(me.EmbeddedDocument):
    name = me.StringField(required=True)
    message = me.StringField(required=True)
    # photo = me.StringField(default=None)
    buttons = me.ListField(default=list())
    input_type = me.StringField(choices=["text", "photo", "contact"], default="text")
    max_text_size = me.IntField(max_value=4000)
    allow_user_input = me.BooleanField(default=True)
    regex = me.StringField(default=None)
    correct_answer_message = me.StringField(defaul=None)
    wrong_answer_message = me.StringField(default="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!")


class Answer(me.EmbeddedDocument):
    pass


class Quiz(me.Document):
    name = me.StringField(required=True)
    questions = me.ListField(me.EmbeddedDocumentField(Question), default=list())
    is_required = me.BooleanField(default=False)


# class VacancyPreviewLog(me.Document):
#    """
#    Class for logging user viewing of vacancy.
#    """
#
#    vacancy = me.ReferenceField(Vacancy, required=True)
#    user = me.ReferenceField(User, required=True)
#    log_datetime = me.DateTimeField(required=True)
#


class VacancyApplyLog(me.Document):
    """
    Class for logging any applying for a job.
    """

    vacancy = me.ReferenceField(Vacancy, required=True)
    user = me.ReferenceField(User, required=True)
    apply_datetime = me.DateTimeField(required=True)
    last_view_datetime = me.DateTimeField(default=None)
    view_count = me.IntField(default=0)


# class VacancyPromotionLog(me.Document):
#    """
#    Class for logging every promotion.
#    """
#
#    vacancy = me.ReferenceField(Vacancy, required=True)
#    auditory_tag = me.StringField(required=True)
#    log_datetime = me.DateField(required=True)


# from datetime import datetime
#
# if __name__ == '__main__':
#    #table1 = User().save()  # insert new user in table
#
#    me.connect(host="mongodb+srv://HYaroslav:4486@ejfcluster.jdquq.mongodb.net/ejf_vacancy_bot?retryWrites=true&w=majority")
#
#    now = datetime.now()
#
#    user = User()
#    user.chat_id = 12312
#    user.name = "Yaroslav"
#    user.surname = "Horodyskyi"
#    user.username = "@Yaroslav_Horodyskyi"
#    user.registration_date = now
#    user.last_update_date = now
#    user.last_interaction_date = now
#    try:
#        user.save()
#    except:
#        pass
#
#    company = Company()
#    company.name = "SoftServe"
#    company.photo_id = "afadfasdf"
#    company.description = "hahaaahahha"
#    company.token = "afafe13f23f3"
#    company.registration_date = now
#    try:
#        company.save()
#    except:
#        pass
#
#    vacancy = Vacancy()
#    vacancy.company = Company.objects.filter(name="SoftServe")[0]
#    vacancy.name = "Strong Middle Python developer"
#    vacancy.tag = "python"
#    vacancy.salary = "1000-2000$"
#    vacancy.experience = "10 —Ä–æ–∫—ñ–≤"
#    vacancy.employment_type = "Full Time"
#    vacancy.description = """Requirements:
#
# 4+ years of experience in Python development;Experience in Django, Postgre, SQL,;Build REST API for Database CRUD Operations;Understanding Python deployment flow (django, wsgi, nginx, heroku etc.);Experience with Linux, bash scripting;Experience with CI/CD pipelines and devops practices for Python developments;Ability unit/integration tests.Experience with Swagger and Git Hub
#
# Duties:
#
# Development of projects from scratch
# Development of project modules.
# Writing an API.
# Supporting of ready projects
# Terms:
#
# Basic communication in Telegram (you need to be in touch with some of our distant workers).
# Working in a team of programmers.
# Using Trello task manager
# Git Hub
# Additional info:
#
# Please be ready to do testing task before the interview"""
#    vacancy.add_date = now
#    vacancy.last_update_date = now
#    #vacancy.save()
#    try:
#        pass
#        #vacancy.save()
#    except:
#        pass
#
#    #cv = CV()
#    #cv.cv_file = open("cv.pdf", "rb")
#    #cv.add_date = now
#    #cv.last_update_date = now
#    #cv.save()
##
#    #user = User.objects.with_id("605fae402abdd4962ae12c20")
##
#    #user.cv = cv
#    #user.save()
#
#
#    log = VacancyApplyLog()
#    log.vacancy = Vacancy.objects.with_id("605fbd8a7e6e123aa296f234")
#    log.user = User.objects.with_id("605fae402abdd4962ae12c20")
#    log.cv = CV.objects.with_id("605fbee7d2484091d578464f")
#    log.log_datetime = now
#    log.save()
#
#
#
#
#
#
#    #for u in User.objects:
#    #    print(len(str(u.id)))
#
#
#    #vac1 = Vacancy()
#    #vac2 = Vacancy()
#    #vacancies = [vac1, vac2]
#    #table2 = Company(name='Salam', photo_id='1', description='fff', vacancy_counter='5', HR_chat_id='1',
#    #                 token='urhfhsf1', registration_date='2012-02-02', vacancy_list=vacancies).save()
#    #table4 = VacancyPreviewLog().save()
#    #table5 = VacancyApplyLog().save()
#    #table6 = VacancyPromotionLog().save()
#
